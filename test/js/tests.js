// Generated by CoffeeScript 1.3.3
(function() {

  describe("the backbone.event.one plugin", function() {
    var should;
    should = chai.should();
    beforeEach(function() {
      var _this;
      this.event1Spy = sinon.spy();
      this.event23Spy = sinon.spy();
      this.event4Spy = sinon.spy();
      this.event5Spy = sinon.spy();
      this.filterSpy = sinon.spy();
      this.context = {};
      this.filterReturnValue = true;
      this.obj = _.extend({}, Backbone.Events);
      _this = this;
      this.obj.one("test1", this.event1Spy, this.context, function() {
        _this.filterSpy.apply(this, arguments);
        return _this.filterReturnValue;
      });
      this.obj.one("test2 test3", this.event23Spy, this.context);
      return this.obj.one({
        "test4": this.event4Spy,
        "test5": this.event5Spy
      }, this.context);
    });
    describe("the one method", function() {
      it("should be able to be extend", function() {
        var backboneObjNames, objName, _i, _len;
        Backbone.Events.one.should.be.a("Function");
        backboneObjNames = ["Model", "Collection", "View", "Router", "History"];
        for (_i = 0, _len = backboneObjNames.length; _i < _len; _i++) {
          objName = backboneObjNames[_i];
          (new Backbone[objName])["one"].should.be.a("Function");
        }
        return _.extend({}, Backbone.Events)["one"].should.be.a("Function");
      });
      it("should be work", function() {
        this.obj.trigger("test1");
        this.obj.trigger("test1");
        return this.event1Spy.calledOnce.should.be["true"];
      });
      it("should work with jQuery event bind syntax", function() {
        this.obj.trigger("test2");
        this.event23Spy.calledOnce.should.be["true"];
        this.obj.trigger("test3");
        return this.event23Spy.calledTwice.should.be["true"];
      });
      return it("should work with event map syntax", function() {
        this.obj.trigger("test4");
        this.event4Spy.calledOnce.should.be["true"];
        this.obj.trigger("test5");
        return this.event5Spy.calledOnce.should.be["true"];
      });
    });
    describe("the whenFilter", function() {
      it("should be called", function() {
        this.obj.trigger("test1");
        return this.filterSpy.calledOnce.should.be["true"];
      });
      it("should called on context", function() {
        this.obj.trigger("test1");
        return this.filterSpy.calledOn(this.context).should.be["true"];
      });
      it("should get arguments passed in", function() {
        this.obj.trigger("test1", "some", "args");
        return this.filterSpy.withArgs("some", "args").calledOnce.should.be["true"];
      });
      it("should ignore event if return false", function() {
        this.filterReturnValue = false;
        this.obj.trigger("test1");
        return this.event1Spy.called.should.be["false"];
      });
      return it("should ignore event if return false like value", function() {
        this.filterReturnValue = "";
        this.obj.trigger("test1");
        return this.event1Spy.called.should.be["false"];
      });
    });
    return describe("the handler argument", function() {
      it("should be work", function() {
        this.obj.trigger("test1", "some", "args");
        return this.event1Spy.withArgs("some", "args").calledOnce.should.be["true"];
      });
      it("should called on context", function() {
        this.obj.trigger("test1");
        return this.event1Spy.calledOn(this.context).should.be["true"];
      });
      return it("should get arguments passed in", function() {
        this.obj.trigger("test1", "some", "args");
        return this.event1Spy.withArgs("some", "args").calledOnce.should.be["true"];
      });
    });
  });

}).call(this);
